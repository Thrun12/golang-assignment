package util

import (
	"testing"
)

func TestValidateApplicant(t *testing.T) {
	tests := []struct {
		name              string
		inputName         string
		email             string
		position          string
		yearsExperience   int32
		githubStars       int32
		interviewScore    float64
		culturalFitScore  float64
		technicalScore    float64
		isUpdate          bool
		id                int64
		expectedError     string
	}{
		// Valid cases
		{
			name:             "valid create request",
			inputName:        "John Doe",
			email:            "john@example.com",
			position:         "Software Engineer",
			yearsExperience:  5,
			githubStars:      100,
			interviewScore:   85.5,
			culturalFitScore: 90.0,
			technicalScore:   88.0,
			isUpdate:         false,
			id:               0,
			expectedError:    "",
		},
		{
			name:             "valid update request",
			inputName:        "Jane Smith",
			email:            "jane@example.com",
			position:         "Senior Developer",
			yearsExperience:  10,
			githubStars:      500,
			interviewScore:   95.0,
			culturalFitScore: 92.0,
			technicalScore:   98.0,
			isUpdate:         true,
			id:               1,
			expectedError:    "",
		},
		{
			name:             "valid with zero experience",
			inputName:        "Alice Brown",
			email:            "alice@example.com",
			position:         "Junior Developer",
			yearsExperience:  0,
			githubStars:      0,
			interviewScore:   70.0,
			culturalFitScore: 75.0,
			technicalScore:   68.0,
			isUpdate:         false,
			id:               0,
			expectedError:    "",
		},
		{
			name:             "valid with boundary scores",
			inputName:        "Bob Wilson",
			email:            "bob@example.com",
			position:         "DevOps Engineer",
			yearsExperience:  3,
			githubStars:      50,
			interviewScore:   0.0,
			culturalFitScore: 100.0,
			technicalScore:   50.0,
			isUpdate:         false,
			id:               0,
			expectedError:    "",
		},
		// Invalid ID for update
		{
			name:             "invalid update with zero id",
			inputName:        "Test User",
			email:            "test@example.com",
			position:         "Developer",
			yearsExperience:  5,
			githubStars:      100,
			interviewScore:   85.0,
			culturalFitScore: 90.0,
			technicalScore:   88.0,
			isUpdate:         true,
			id:               0,
			expectedError:    "id must be positive",
		},
		{
			name:             "invalid update with negative id",
			inputName:        "Test User",
			email:            "test@example.com",
			position:         "Developer",
			yearsExperience:  5,
			githubStars:      100,
			interviewScore:   85.0,
			culturalFitScore: 90.0,
			technicalScore:   88.0,
			isUpdate:         true,
			id:               -1,
			expectedError:    "id must be positive",
		},
		// Invalid name
		{
			name:             "empty name",
			inputName:        "",
			email:            "john@example.com",
			position:         "Developer",
			yearsExperience:  5,
			githubStars:      100,
			interviewScore:   85.0,
			culturalFitScore: 90.0,
			technicalScore:   88.0,
			isUpdate:         false,
			id:               0,
			expectedError:    "name is required",
		},
		{
			name:             "whitespace only name",
			inputName:        "   ",
			email:            "john@example.com",
			position:         "Developer",
			yearsExperience:  5,
			githubStars:      100,
			interviewScore:   85.0,
			culturalFitScore: 90.0,
			technicalScore:   88.0,
			isUpdate:         false,
			id:               0,
			expectedError:    "name is required",
		},
		{
			name:             "name too short",
			inputName:        "A",
			email:            "john@example.com",
			position:         "Developer",
			yearsExperience:  5,
			githubStars:      100,
			interviewScore:   85.0,
			culturalFitScore: 90.0,
			technicalScore:   88.0,
			isUpdate:         false,
			id:               0,
			expectedError:    "name must be at least 2 characters",
		},
		{
			name:             "name too long",
			inputName:        string(make([]byte, 256)), // 256 characters
			email:            "john@example.com",
			position:         "Developer",
			yearsExperience:  5,
			githubStars:      100,
			interviewScore:   85.0,
			culturalFitScore: 90.0,
			technicalScore:   88.0,
			isUpdate:         false,
			id:               0,
			expectedError:    "name must be at most 255 characters",
		},
		// Invalid email
		{
			name:             "empty email",
			inputName:        "John Doe",
			email:            "",
			position:         "Developer",
			yearsExperience:  5,
			githubStars:      100,
			interviewScore:   85.0,
			culturalFitScore: 90.0,
			technicalScore:   88.0,
			isUpdate:         false,
			id:               0,
			expectedError:    "email is required",
		},
		{
			name:             "whitespace only email",
			inputName:        "John Doe",
			email:            "   ",
			position:         "Developer",
			yearsExperience:  5,
			githubStars:      100,
			interviewScore:   85.0,
			culturalFitScore: 90.0,
			technicalScore:   88.0,
			isUpdate:         false,
			id:               0,
			expectedError:    "email is required",
		},
		{
			name:             "invalid email format",
			inputName:        "John Doe",
			email:            "invalid-email",
			position:         "Developer",
			yearsExperience:  5,
			githubStars:      100,
			interviewScore:   85.0,
			culturalFitScore: 90.0,
			technicalScore:   88.0,
			isUpdate:         false,
			id:               0,
			expectedError:    "email must be a valid email address",
		},
		{
			name:             "invalid email missing domain",
			inputName:        "John Doe",
			email:            "john@",
			position:         "Developer",
			yearsExperience:  5,
			githubStars:      100,
			interviewScore:   85.0,
			culturalFitScore: 90.0,
			technicalScore:   88.0,
			isUpdate:         false,
			id:               0,
			expectedError:    "email must be a valid email address",
		},
		// Invalid position
		{
			name:             "empty position",
			inputName:        "John Doe",
			email:            "john@example.com",
			position:         "",
			yearsExperience:  5,
			githubStars:      100,
			interviewScore:   85.0,
			culturalFitScore: 90.0,
			technicalScore:   88.0,
			isUpdate:         false,
			id:               0,
			expectedError:    "position is required",
		},
		{
			name:             "whitespace only position",
			inputName:        "John Doe",
			email:            "john@example.com",
			position:         "   ",
			yearsExperience:  5,
			githubStars:      100,
			interviewScore:   85.0,
			culturalFitScore: 90.0,
			technicalScore:   88.0,
			isUpdate:         false,
			id:               0,
			expectedError:    "position is required",
		},
		{
			name:             "position too short",
			inputName:        "John Doe",
			email:            "john@example.com",
			position:         "A",
			yearsExperience:  5,
			githubStars:      100,
			interviewScore:   85.0,
			culturalFitScore: 90.0,
			technicalScore:   88.0,
			isUpdate:         false,
			id:               0,
			expectedError:    "position must be at least 2 characters",
		},
		// Invalid years experience
		{
			name:             "negative years experience",
			inputName:        "John Doe",
			email:            "john@example.com",
			position:         "Developer",
			yearsExperience:  -1,
			githubStars:      100,
			interviewScore:   85.0,
			culturalFitScore: 90.0,
			technicalScore:   88.0,
			isUpdate:         false,
			id:               0,
			expectedError:    "years_experience must be positive",
		},
		// Invalid github stars
		{
			name:             "negative github stars",
			inputName:        "John Doe",
			email:            "john@example.com",
			position:         "Developer",
			yearsExperience:  5,
			githubStars:      -1,
			interviewScore:   85.0,
			culturalFitScore: 90.0,
			technicalScore:   88.0,
			isUpdate:         false,
			id:               0,
			expectedError:    "github_stars must be positive",
		},
		// Invalid interview score
		{
			name:             "negative interview score",
			inputName:        "John Doe",
			email:            "john@example.com",
			position:         "Developer",
			yearsExperience:  5,
			githubStars:      100,
			interviewScore:   -1.0,
			culturalFitScore: 90.0,
			technicalScore:   88.0,
			isUpdate:         false,
			id:               0,
			expectedError:    "interview_score must be between 0 and 100",
		},
		{
			name:             "interview score over 100",
			inputName:        "John Doe",
			email:            "john@example.com",
			position:         "Developer",
			yearsExperience:  5,
			githubStars:      100,
			interviewScore:   101.0,
			culturalFitScore: 90.0,
			technicalScore:   88.0,
			isUpdate:         false,
			id:               0,
			expectedError:    "interview_score must be between 0 and 100",
		},
		// Invalid cultural fit score
		{
			name:             "negative cultural fit score",
			inputName:        "John Doe",
			email:            "john@example.com",
			position:         "Developer",
			yearsExperience:  5,
			githubStars:      100,
			interviewScore:   85.0,
			culturalFitScore: -1.0,
			technicalScore:   88.0,
			isUpdate:         false,
			id:               0,
			expectedError:    "cultural_fit_score must be between 0 and 100",
		},
		{
			name:             "cultural fit score over 100",
			inputName:        "John Doe",
			email:            "john@example.com",
			position:         "Developer",
			yearsExperience:  5,
			githubStars:      100,
			interviewScore:   85.0,
			culturalFitScore: 100.1,
			technicalScore:   88.0,
			isUpdate:         false,
			id:               0,
			expectedError:    "cultural_fit_score must be between 0 and 100",
		},
		// Invalid technical score
		{
			name:             "negative technical score",
			inputName:        "John Doe",
			email:            "john@example.com",
			position:         "Developer",
			yearsExperience:  5,
			githubStars:      100,
			interviewScore:   85.0,
			culturalFitScore: 90.0,
			technicalScore:   -0.5,
			isUpdate:         false,
			id:               0,
			expectedError:    "technical_score must be between 0 and 100",
		},
		{
			name:             "technical score over 100",
			inputName:        "John Doe",
			email:            "john@example.com",
			position:         "Developer",
			yearsExperience:  5,
			githubStars:      100,
			interviewScore:   85.0,
			culturalFitScore: 90.0,
			technicalScore:   150.0,
			isUpdate:         false,
			id:               0,
			expectedError:    "technical_score must be between 0 and 100",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			err := ValidateApplicant(
				tt.inputName,
				tt.email,
				tt.position,
				tt.yearsExperience,
				tt.githubStars,
				tt.interviewScore,
				tt.culturalFitScore,
				tt.technicalScore,
				tt.isUpdate,
				tt.id,
			)

			if tt.expectedError == "" {
				if err != nil {
					t.Errorf("expected no error, got: %v", err)
				}
			} else {
				if err == nil {
					t.Errorf("expected error containing '%s', got nil", tt.expectedError)
				} else if err.Error() != tt.expectedError {
					t.Errorf("expected error '%s', got '%s'", tt.expectedError, err.Error())
				}
			}
		})
	}
}
