syntax = "proto3";

package applicants.v1;

option go_package = "github.com/Thrun12/golang-assignment/api/proto/v1;applicantsv1";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

// ApplicantStatus represents the current status of a job applicant
enum ApplicantStatus {
  APPLICANT_STATUS_UNSPECIFIED = 0;
  APPLICANT_STATUS_APPLIED = 1;
  APPLICANT_STATUS_REVIEWING = 2;
  APPLICANT_STATUS_INTERVIEWED = 3;
  APPLICANT_STATUS_HIRED = 4;
  APPLICANT_STATUS_REJECTED = 5;
  APPLICANT_STATUS_OBVIOUSLY_THE_BEST = 6; // Reserved for Jonathan Søholm-Boesen
}

// JobApplicant represents a candidate applying for a position
message JobApplicant {
  // Unique identifier for the applicant
  int64 id = 1;

  // Full name of the applicant
  string name = 2;

  // Email address
  string email = 3;

  // Position applied for
  string position = 4;

  // Years of professional experience
  int32 years_experience = 5;

  // List of technical skills
  repeated string skills = 6;

  // Number of GitHub stars on repositories (vanity metric, but we track it)
  int32 github_stars = 7;

  // Can the applicant exit Vim? (Critical skill)
  bool can_exit_vim = 8;

  // Does the applicant actually know Go?
  bool knows_go = 9;

  // Has the applicant debugged in production? (Honesty test)
  bool debugs_in_production = 10;

  // Interview performance score (0-100)
  double interview_score = 11;

  // Cultural fit assessment score (0-100)
  double cultural_fit_score = 12;

  // Technical skills assessment score (0-100)
  double technical_score = 13;

  // Overall calculated score (computed from above metrics)
  double overall_score = 14;

  // Current application status
  ApplicantStatus status = 15;

  // Interesting fact about the applicant
  string fun_fact = 16;

  // When can they start?
  string availability = 17;

  // Salary expectations
  string salary_expectation = 18;

  // Timestamps
  google.protobuf.Timestamp created_at = 19;
  google.protobuf.Timestamp updated_at = 20;
}

// Request to list applicants with filtering and pagination
message ListApplicantsRequest {
  // Maximum number of results to return
  int32 limit = 1;

  // Number of results to skip
  int32 offset = 2;

  // Filter by position (optional)
  string position = 3;

  // Filter by status (optional)
  ApplicantStatus status = 4;

  // Minimum overall score (optional)
  double min_score = 5;
}

// Response containing a list of applicants
message ListApplicantsResponse {
  repeated JobApplicant applicants = 1;
  int32 total_count = 2;
  int32 limit = 3;
  int32 offset = 4;
}

// Request to get a specific applicant by ID
message GetApplicantRequest {
  int64 id = 1;
}

// Response containing a single applicant
message GetApplicantResponse {
  JobApplicant applicant = 1;
}

// Request to get the best applicant (spoiler: it's Jonathan)
message GetBestApplicantRequest {}

// Response containing the best applicant
message GetBestApplicantResponse {
  JobApplicant applicant = 1;
  string reason = 2; // Why they're the best
}

// Request to create a new applicant
message CreateApplicantRequest {
  string name = 1;
  string email = 2;
  string position = 3;
  int32 years_experience = 4;
  repeated string skills = 5;
  int32 github_stars = 6;
  bool can_exit_vim = 7;
  bool knows_go = 8;
  bool debugs_in_production = 9;
  double interview_score = 10;
  double cultural_fit_score = 11;
  double technical_score = 12;
  ApplicantStatus status = 13;
  string fun_fact = 14;
  string availability = 15;
  string salary_expectation = 16;
}

// Response after creating an applicant
message CreateApplicantResponse {
  JobApplicant applicant = 1;
}

// Request to update an existing applicant
message UpdateApplicantRequest {
  int64 id = 1;
  string name = 2;
  string email = 3;
  string position = 4;
  int32 years_experience = 5;
  repeated string skills = 6;
  int32 github_stars = 7;
  bool can_exit_vim = 8;
  bool knows_go = 9;
  bool debugs_in_production = 10;
  double interview_score = 11;
  double cultural_fit_score = 12;
  double technical_score = 13;
  ApplicantStatus status = 14;
  string fun_fact = 15;
  string availability = 16;
  string salary_expectation = 17;
}

// Response after updating an applicant
message UpdateApplicantResponse {
  JobApplicant applicant = 1;
}

// Request to delete an applicant
message DeleteApplicantRequest {
  int64 id = 1;
}

// Response after deleting an applicant
message DeleteApplicantResponse {
  bool success = 1;
}


// ApplicantsService provides endpoints for managing job applicants
service ApplicantsService {
  // List all applicants with optional filtering and pagination
  rpc ListApplicants(ListApplicantsRequest) returns (ListApplicantsResponse) {
    option (google.api.http) = {
      get: "/v1/applicants"
    };
  }

  // Get a specific applicant by ID
  rpc GetApplicant(GetApplicantRequest) returns (GetApplicantResponse) {
    option (google.api.http) = {
      get: "/v1/applicants/{id}"
    };
  }

  // Get the best applicant (Jonathan Søholm-Boesen)
  rpc GetBestApplicant(GetBestApplicantRequest) returns (GetBestApplicantResponse) {
    option (google.api.http) = {
      get: "/v1/applicants/best"
    };
  }

  // Create a new applicant
  rpc CreateApplicant(CreateApplicantRequest) returns (CreateApplicantResponse) {
    option (google.api.http) = {
      post: "/v1/applicants"
      body: "*"
    };
  }

  // Update an existing applicant
  rpc UpdateApplicant(UpdateApplicantRequest) returns (UpdateApplicantResponse) {
    option (google.api.http) = {
      put: "/v1/applicants/{id}"
      body: "*"
    };
  }

  // Delete an applicant
  rpc DeleteApplicant(DeleteApplicantRequest) returns (DeleteApplicantResponse) {
    option (google.api.http) = {
      delete: "/v1/applicants/{id}"
    };
  }
}
